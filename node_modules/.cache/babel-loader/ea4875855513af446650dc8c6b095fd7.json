{"ast":null,"code":"var _jsxFileName = \"/Users/charles.hanna/Development/useful-chrome-extensions/abbreviations-dictionary/src/Components/Input.tsx\",\n  _s = $RefreshSig$();\nimport dictionary from '../dictionary.json';\nimport MatchesContainer from \"./MatchesContainer\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Input() {\n  _s();\n  let isSubmit = false;\n  // @ts-ignore\n  const {\n    value,\n    setValue\n  } = useState('');\n  const findMatches = query => {\n    const regex = new RegExp(query, 'gi');\n    const termsArray = [];\n    [dictionary].forEach(obj => {\n      for (let [term, def] of Object.entries(obj)) {\n        termsArray.push(term);\n      }\n    });\n    return termsArray.filter(val => val.match(regex));\n  };\n  const getTermsHtmlArray = e => {\n    const el = e.currentTarget;\n    if (el) {\n      const value = el.value;\n      const matchArray = findMatches(value);\n      return matchArray.map((term, index) => {\n        const regex = new RegExp(value, 'gi');\n        return term.replace(regex, value);\n      });\n    }\n  };\n  const searchKeyboardEvents = e => {\n    // const resultsArray = getTermsHtmlArray(e, dictionary);\n    // const searchInputGhost =\n    //     const matchesContainer = document.querySelector('[data-matches-container]');\n    //     if(matchesContainer){\n    //         matchesContainer.innerHTML = getTermsHtmlArray(e, dictionary).join('');\n    //         if (matchesContainer.classList.contains('hidden') && !isSubmit) {\n    //             matchesContainer.classList.remove('hidden');\n    //         }\n    //     }\n    const target = e.currentTarget;\n    if (target) {\n      const value = target.value;\n      // Ghosting\n      // const matchBeginningRegex = new RegExp(`^${value}`, 'g')\n      // if (e.code !== 'ENTER') {\n      //     if (matchesContainer && matchesContainer.firstElementChild && matchesContainer.firstElementChild.dataset.key) {\n      //         if (matchesContainer.firstElementChild.dataset.key.match(matchBeginningRegex)) {\n      //             searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n      //         } else {\n      //             searchInputGhost.value = '';\n      //         }\n      //     } else {\n      //         if(searchInputGhost) searchInputGhost.value = '';\n      //     }\n      // }\n      // if (value === '' || (matchesContainer && matchesContainer.children.length === 0)) {\n      //     matchesContainer.classList.add('hidden');\n      //     count = 0;\n      //     if(searchInputGhost) searchInputGhost.value = '';\n      // }\n      // // reset when text is inserted.\n      // if (e.keyCode !== 39 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 13) {\n      //     count = 0;\n      // }\n      // // left arrow\n      // if (e.keyCode === 39) {\n      //     if(searchInputGhost && matchesContainer){\n      //         searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n      //         e.currentTarget.value = matchesContainer.firstElementChild.dataset.key;\n      //     }\n      // }\n      // // up arrow\n      // if (e.keyCode === 38) {\n      //     if (count >= 0) {\n      //         count = (count === 0) ? count = 0 : count - 1;\n      //         if (matchesContainer && matchesContainer.children[count]) {\n      //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n      //             searchResultsContainer.children[count].classList.add('text-gray-900');\n      //         }\n      //     }\n      // }\n      // // down arrow\n      // if (e.keyCode === 40) {\n      //     const listMaxLength = matchesContainer && matchesContainer.children.length - 1\n      //     if (count <= listMaxLength) {\n      //         if (!isInitialValue) {\n      //             count = (count === listMaxLength) ? listMaxLength : count + 1\n      //         }\n      //         if (matchesContainer && matchesContainer.children[count]) {\n      //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n      //             searchResultsContainer.children[count].classList.add('text-gray-900');\n      //             isInitialValue = false;\n      //         }\n      //     }\n      // }\n      // //esc\n      // if (e.keyCode === 27) {\n      //     matchesContainer && matchesContainer.classList.add('hidden');\n      // }\n    }\n\n    return [];\n  };\n\n  // if (e.type === 'submit') {\n  //     isSubmit = true;\n  //     matchesContainer.innerHTML = resultsArray.join('');\n  //     if (searchInput && searchInputGhost && matchesContainer && matchesContainer.children.length > 0) {\n  //         searchInputGhost.value = searchResultsContainer.children[count].dataset.key\n  //         searchInputGhost.style.color= 'transparent'\n  //         searchInput.value = searchResultsContainer.children[count].dataset.key\n  //     }\n  //\n  //     if (searchInputGhost && matchesContainer && matchesContainer.length === 1) {\n  //         searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n  //     }\n  //\n  //     if (matchesContainer && matchesContainer.children.length === 0) {\n  //         e.preventDefault();\n  //     }\n  //\n  //     matchesContainer && matchesContainer.classList.add('hidden');\n  // }\n\n  const searchMouseEvents = e => {\n    console.log(e);\n    // if (e.type === 'click') {\n    //     if (e.target.tagName === 'LI' && searchInputGhost) {\n    //         searchInputGhost.value = e.target.dataset.key;\n    //         searchForm && searchForm.submit();\n    //     }\n    // }\n  };\n\n  // const displayMatches = (e:Event) => {\n  //     searchKeyboardEvents(e as KeyboardEvent)\n  //     searchMouseEvents(e as MouseEvent);\n  // }\n\n  const searchEvents = e => {\n    // searchInput && searchInput.addEventListener('keyup', displayMatches)\n    // searchResultsContainer && searchResultsContainer.addEventListener('click', displayMatches)\n    // // searchResultsContainer && searchResultsContainer.addEventListener('mouseover', displayMatches);\n    // searchForm && searchForm.addEventListener('submit', displayMatches)\n    // window.addEventListener('click', (e) => {\n    //     if (e.target.closest !== searchForm && searchResultsContainer) {\n    //         searchResultsContainer.classList.add('hidden');\n    //     }\n    // })\n    // window.addEventListener('keydown', (e) => {\n    //\n    //     if (e.key === 'f' && e.ctrlKey && e.metaKey) {\n    //         searchInput.focus();\n    //     }\n    // })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"termInput\",\n      className: \"block text-sm font-medium text-slate-400\",\n      children: \"Abbreviations list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative mt-1 rounded-md shadow-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"termInput\",\n        id: \"termInput\",\n        className: \"block w-full rounded-md border-gray-300 pl-7 pr-12 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\",\n        placeholder: \"Start typing and abbreviation..\",\n        onKeyUp: setValue('hello')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-y-0 right-0 flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"currency\",\n          className: \"sr-only\",\n          children: \"Abbreviation Dictionary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MatchesContainer, {\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n}\n_s(Input, \"NdpTEfat00RmKYzhkrVNO2iZ9e0=\");\n_c = Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["dictionary","MatchesContainer","useState","Input","isSubmit","value","setValue","findMatches","query","regex","RegExp","termsArray","forEach","obj","term","def","Object","entries","push","filter","val","match","getTermsHtmlArray","e","el","currentTarget","matchArray","map","index","replace","searchKeyboardEvents","target","searchMouseEvents","console","log","searchEvents"],"sources":["/Users/charles.hanna/Development/useful-chrome-extensions/abbreviations-dictionary/src/Components/Input.tsx"],"sourcesContent":["import dictionary from '../dictionary.json';\nimport MatchesContainer from \"./MatchesContainer\";\nimport {useState} from \"react\";\n\nexport default function Input() {\n\n    let isSubmit = false;\n    // @ts-ignore\n    const {value, setValue} = useState('');\n\n    const findMatches = (query:string) => {\n        const regex = new RegExp(query, 'gi');\n        const termsArray:string[] = [];\n            [dictionary].forEach(obj => {\n                for (let [term, def] of Object.entries(obj)) {\n                    termsArray.push(term);\n                }\n            })\n        return termsArray.filter((val:string) => val.match(regex))\n    }\n\n    const getTermsHtmlArray = (e:React.KeyboardEvent<HTMLInputElement>) => {\n        const el = e.currentTarget;\n        if(el){\n            const value = el.value;\n            const matchArray = findMatches(value);\n            return matchArray.map((term, index) => {\n                const regex = new RegExp(value, 'gi');\n                return term.replace(regex, value);\n            })\n        }\n    }\n\n    const searchKeyboardEvents = (e:React.KeyboardEvent<HTMLInputElement>):[]=> {\n        // const resultsArray = getTermsHtmlArray(e, dictionary);\n        // const searchInputGhost =\n        //     const matchesContainer = document.querySelector('[data-matches-container]');\n        //     if(matchesContainer){\n        //         matchesContainer.innerHTML = getTermsHtmlArray(e, dictionary).join('');\n        //         if (matchesContainer.classList.contains('hidden') && !isSubmit) {\n        //             matchesContainer.classList.remove('hidden');\n        //         }\n        //     }\n            const target = e.currentTarget;\n            if(target){\n                const value = target.value;\n                // Ghosting\n                // const matchBeginningRegex = new RegExp(`^${value}`, 'g')\n                // if (e.code !== 'ENTER') {\n                //     if (matchesContainer && matchesContainer.firstElementChild && matchesContainer.firstElementChild.dataset.key) {\n                //         if (matchesContainer.firstElementChild.dataset.key.match(matchBeginningRegex)) {\n                //             searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n                //         } else {\n                //             searchInputGhost.value = '';\n                //         }\n                //     } else {\n                //         if(searchInputGhost) searchInputGhost.value = '';\n                //     }\n                // }\n                // if (value === '' || (matchesContainer && matchesContainer.children.length === 0)) {\n                //     matchesContainer.classList.add('hidden');\n                //     count = 0;\n                //     if(searchInputGhost) searchInputGhost.value = '';\n                // }\n                // // reset when text is inserted.\n                // if (e.keyCode !== 39 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 13) {\n                //     count = 0;\n                // }\n                // // left arrow\n                // if (e.keyCode === 39) {\n                //     if(searchInputGhost && matchesContainer){\n                //         searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n                //         e.currentTarget.value = matchesContainer.firstElementChild.dataset.key;\n                //     }\n                // }\n                // // up arrow\n                // if (e.keyCode === 38) {\n                //     if (count >= 0) {\n                //         count = (count === 0) ? count = 0 : count - 1;\n                //         if (matchesContainer && matchesContainer.children[count]) {\n                //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n                //             searchResultsContainer.children[count].classList.add('text-gray-900');\n                //         }\n                //     }\n                // }\n                // // down arrow\n                // if (e.keyCode === 40) {\n                //     const listMaxLength = matchesContainer && matchesContainer.children.length - 1\n                //     if (count <= listMaxLength) {\n                //         if (!isInitialValue) {\n                //             count = (count === listMaxLength) ? listMaxLength : count + 1\n                //         }\n                //         if (matchesContainer && matchesContainer.children[count]) {\n                //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n                //             searchResultsContainer.children[count].classList.add('text-gray-900');\n                //             isInitialValue = false;\n                //         }\n                //     }\n                // }\n                // //esc\n                // if (e.keyCode === 27) {\n                //     matchesContainer && matchesContainer.classList.add('hidden');\n                // }\n            }\n            return [];\n    }\n\n    // if (e.type === 'submit') {\n    //     isSubmit = true;\n    //     matchesContainer.innerHTML = resultsArray.join('');\n    //     if (searchInput && searchInputGhost && matchesContainer && matchesContainer.children.length > 0) {\n    //         searchInputGhost.value = searchResultsContainer.children[count].dataset.key\n    //         searchInputGhost.style.color= 'transparent'\n    //         searchInput.value = searchResultsContainer.children[count].dataset.key\n    //     }\n    //\n    //     if (searchInputGhost && matchesContainer && matchesContainer.length === 1) {\n    //         searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n    //     }\n    //\n    //     if (matchesContainer && matchesContainer.children.length === 0) {\n    //         e.preventDefault();\n    //     }\n    //\n    //     matchesContainer && matchesContainer.classList.add('hidden');\n    // }\n\n    const searchMouseEvents = (e:MouseEvent) => {\n        console.log(e);\n        // if (e.type === 'click') {\n        //     if (e.target.tagName === 'LI' && searchInputGhost) {\n        //         searchInputGhost.value = e.target.dataset.key;\n        //         searchForm && searchForm.submit();\n        //     }\n        // }\n    }\n\n    // const displayMatches = (e:Event) => {\n    //     searchKeyboardEvents(e as KeyboardEvent)\n    //     searchMouseEvents(e as MouseEvent);\n    // }\n\n    const searchEvents = (e:Event) => {\n        // searchInput && searchInput.addEventListener('keyup', displayMatches)\n        // searchResultsContainer && searchResultsContainer.addEventListener('click', displayMatches)\n        // // searchResultsContainer && searchResultsContainer.addEventListener('mouseover', displayMatches);\n        // searchForm && searchForm.addEventListener('submit', displayMatches)\n        // window.addEventListener('click', (e) => {\n        //     if (e.target.closest !== searchForm && searchResultsContainer) {\n        //         searchResultsContainer.classList.add('hidden');\n        //     }\n        // })\n        // window.addEventListener('keydown', (e) => {\n        //\n        //     if (e.key === 'f' && e.ctrlKey && e.metaKey) {\n        //         searchInput.focus();\n        //     }\n        // })\n    }\n\n\n    return (\n        <div>\n            <label htmlFor=\"termInput\" className=\"block text-sm font-medium text-slate-400\">\n                Abbreviations list\n            </label>\n            <div className=\"relative mt-1 rounded-md shadow-sm\">\n                <input\n                    type=\"text\"\n                    name=\"termInput\"\n                    id=\"termInput\"\n                    className=\"block w-full rounded-md border-gray-300 pl-7 pr-12 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                    placeholder=\"Start typing and abbreviation..\"\n                    onKeyUp={setValue('hello')}\n                />\n                <div className=\"absolute inset-y-0 right-0 flex items-center\">\n                    <label htmlFor=\"currency\" className=\"sr-only\">\n                        Abbreviation Dictionary\n                    </label>\n                </div>\n            </div>\n            <MatchesContainer value={value}/>\n        </div>\n    )\n}"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAAQC,QAAQ,QAAO,OAAO;AAAC;AAE/B,eAAe,SAASC,KAAK,GAAG;EAAA;EAE5B,IAAIC,QAAQ,GAAG,KAAK;EACpB;EACA,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMK,WAAW,GAAIC,KAAY,IAAK;IAClC,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACF,KAAK,EAAE,IAAI,CAAC;IACrC,MAAMG,UAAmB,GAAG,EAAE;IAC1B,CAACX,UAAU,CAAC,CAACY,OAAO,CAACC,GAAG,IAAI;MACxB,KAAK,IAAI,CAACC,IAAI,EAAEC,GAAG,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;QACzCF,UAAU,CAACO,IAAI,CAACJ,IAAI,CAAC;MACzB;IACJ,CAAC,CAAC;IACN,OAAOH,UAAU,CAACQ,MAAM,CAAEC,GAAU,IAAKA,GAAG,CAACC,KAAK,CAACZ,KAAK,CAAC,CAAC;EAC9D,CAAC;EAED,MAAMa,iBAAiB,GAAIC,CAAuC,IAAK;IACnE,MAAMC,EAAE,GAAGD,CAAC,CAACE,aAAa;IAC1B,IAAGD,EAAE,EAAC;MACF,MAAMnB,KAAK,GAAGmB,EAAE,CAACnB,KAAK;MACtB,MAAMqB,UAAU,GAAGnB,WAAW,CAACF,KAAK,CAAC;MACrC,OAAOqB,UAAU,CAACC,GAAG,CAAC,CAACb,IAAI,EAAEc,KAAK,KAAK;QACnC,MAAMnB,KAAK,GAAG,IAAIC,MAAM,CAACL,KAAK,EAAE,IAAI,CAAC;QACrC,OAAOS,IAAI,CAACe,OAAO,CAACpB,KAAK,EAAEJ,KAAK,CAAC;MACrC,CAAC,CAAC;IACN;EACJ,CAAC;EAED,MAAMyB,oBAAoB,GAAIP,CAAuC,IAAO;IACxE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACI,MAAMQ,MAAM,GAAGR,CAAC,CAACE,aAAa;IAC9B,IAAGM,MAAM,EAAC;MACN,MAAM1B,KAAK,GAAG0B,MAAM,CAAC1B,KAAK;MAC1B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;;IACA,OAAO,EAAE;EACjB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM2B,iBAAiB,GAAIT,CAAY,IAAK;IACxCU,OAAO,CAACC,GAAG,CAACX,CAAC,CAAC;IACd;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAED;EACA;EACA;EACA;;EAEA,MAAMY,YAAY,GAAIZ,CAAO,IAAK;IAC9B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;EAGD,oBACI;IAAA,wBACI;MAAO,OAAO,EAAC,WAAW;MAAC,SAAS,EAAC,0CAA0C;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEvE,eACR;MAAK,SAAS,EAAC,oCAAoC;MAAA,wBAC/C;QACI,IAAI,EAAC,MAAM;QACX,IAAI,EAAC,WAAW;QAChB,EAAE,EAAC,WAAW;QACd,SAAS,EAAC,6GAA6G;QACvH,WAAW,EAAC,iCAAiC;QAC7C,OAAO,EAAEjB,QAAQ,CAAC,OAAO;MAAE;QAAA;QAAA;QAAA;MAAA,QAC7B,eACF;QAAK,SAAS,EAAC,8CAA8C;QAAA,uBACzD;UAAO,OAAO,EAAC,UAAU;UAAC,SAAS,EAAC,SAAS;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAErC;QAAA;QAAA;QAAA;MAAA,QACN;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ,eACN,QAAC,gBAAgB;MAAC,KAAK,EAAED;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC/B;AAEd;AAAC,GApLuBF,KAAK;AAAA,KAALA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module"}