{"ast":null,"code":"var _jsxFileName = \"/Users/charles.hanna/Development/useful-chrome-extensions/abbreviations-dictionary/src/Components/MatchesContainer.tsx\";\nimport dictionary from \"../dictionary.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MatchesContainer(_ref) {\n  let {\n    query\n  } = _ref;\n  const findMatches = query => {\n    const regex = new RegExp(query, 'gi');\n    const termsArray = [];\n    [dictionary].forEach(obj => {\n      for (let [term, def] of Object.entries(obj)) {\n        termsArray.push(term);\n      }\n    });\n    return termsArray.filter(val => val.match(regex));\n  };\n  const getTermsHtmlArray = e => {\n    const el = e.currentTarget;\n    if (el) {\n      const value = el.value;\n      const matchArray = findMatches(value);\n      return matchArray.map((term, index) => {\n        const regex = new RegExp(value, 'gi');\n        return term.replace(regex, value);\n      });\n    }\n  };\n  const searchKeyboardEvents = e => {\n    // const resultsArray = getTermsHtmlArray(e, dictionary);\n    // const searchInputGhost =\n    //     const matchesContainer = document.querySelector('[data-matches-container]');\n    //     if(matchesContainer){\n    //         matchesContainer.innerHTML = getTermsHtmlArray(e, dictionary).join('');\n    //         if (matchesContainer.classList.contains('hidden') && !isSubmit) {\n    //             matchesContainer.classList.remove('hidden');\n    //         }\n    //     }\n    const target = e.currentTarget;\n    if (target) {\n      const value = target.value;\n      // Ghosting\n      // const matchBeginningRegex = new RegExp(`^${value}`, 'g')\n      // if (e.code !== 'ENTER') {\n      //     if (matchesContainer && matchesContainer.firstElementChild && matchesContainer.firstElementChild.dataset.key) {\n      //         if (matchesContainer.firstElementChild.dataset.key.match(matchBeginningRegex)) {\n      //             searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n      //         } else {\n      //             searchInputGhost.value = '';\n      //         }\n      //     } else {\n      //         if(searchInputGhost) searchInputGhost.value = '';\n      //     }\n      // }\n      // if (value === '' || (matchesContainer && matchesContainer.children.length === 0)) {\n      //     matchesContainer.classList.add('hidden');\n      //     count = 0;\n      //     if(searchInputGhost) searchInputGhost.value = '';\n      // }\n      // // reset when text is inserted.\n      // if (e.keyCode !== 39 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 13) {\n      //     count = 0;\n      // }\n      // // left arrow\n      // if (e.keyCode === 39) {\n      //     if(searchInputGhost && matchesContainer){\n      //         searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n      //         e.currentTarget.value = matchesContainer.firstElementChild.dataset.key;\n      //     }\n      // }\n      // // up arrow\n      // if (e.keyCode === 38) {\n      //     if (count >= 0) {\n      //         count = (count === 0) ? count = 0 : count - 1;\n      //         if (matchesContainer && matchesContainer.children[count]) {\n      //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n      //             searchResultsContainer.children[count].classList.add('text-gray-900');\n      //         }\n      //     }\n      // }\n      // // down arrow\n      // if (e.keyCode === 40) {\n      //     const listMaxLength = matchesContainer && matchesContainer.children.length - 1\n      //     if (count <= listMaxLength) {\n      //         if (!isInitialValue) {\n      //             count = (count === listMaxLength) ? listMaxLength : count + 1\n      //         }\n      //         if (matchesContainer && matchesContainer.children[count]) {\n      //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n      //             searchResultsContainer.children[count].classList.add('text-gray-900');\n      //             isInitialValue = false;\n      //         }\n      //     }\n      // }\n      // //esc\n      // if (e.keyCode === 27) {\n      //     matchesContainer && matchesContainer.classList.add('hidden');\n      // }\n    }\n\n    return [];\n  };\n  console.log(query);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    \"data-matches-container\": true,\n    className: \"hidden\",\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      id: \"${index}\",\n      className: \"text-sm break-words text-gray-200 cursor-pointer hover:text-gray-900 hover:bg-lexicblue-300 p-1\",\n      \"data-key\": \"${term}\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-lexicblue-100 text-gray-900\",\n        children: [\"$\", query]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 12\n  }, this);\n}\n_c = MatchesContainer;\nvar _c;\n$RefreshReg$(_c, \"MatchesContainer\");","map":{"version":3,"names":["dictionary","MatchesContainer","query","findMatches","regex","RegExp","termsArray","forEach","obj","term","def","Object","entries","push","filter","val","match","getTermsHtmlArray","e","el","currentTarget","value","matchArray","map","index","replace","searchKeyboardEvents","target","console","log"],"sources":["/Users/charles.hanna/Development/useful-chrome-extensions/abbreviations-dictionary/src/Components/MatchesContainer.tsx"],"sourcesContent":["import {useState} from \"react\";\nimport dictionary from \"../dictionary.json\";\n\ninterface Props{\n    query: string;\n}\n\nexport default function MatchesContainer({query}:Props){\n\n    const findMatches = (query:string) => {\n        const regex = new RegExp(query, 'gi');\n        const termsArray:string[] = [];\n        [dictionary].forEach(obj => {\n            for (let [term, def] of Object.entries(obj)) {\n                termsArray.push(term);\n            }\n        })\n        return termsArray.filter((val:string) => val.match(regex))\n    }\n\n    const getTermsHtmlArray = (e:React.KeyboardEvent<HTMLInputElement>) => {\n        const el = e.currentTarget;\n        if(el){\n            const value = el.value;\n            const matchArray = findMatches(value);\n            return matchArray.map((term, index) => {\n                const regex = new RegExp(value, 'gi');\n                return term.replace(regex, value);\n            })\n        }\n    }\n\n    const searchKeyboardEvents = (e:React.KeyboardEvent<HTMLInputElement>):[]=> {\n        // const resultsArray = getTermsHtmlArray(e, dictionary);\n        // const searchInputGhost =\n        //     const matchesContainer = document.querySelector('[data-matches-container]');\n        //     if(matchesContainer){\n        //         matchesContainer.innerHTML = getTermsHtmlArray(e, dictionary).join('');\n        //         if (matchesContainer.classList.contains('hidden') && !isSubmit) {\n        //             matchesContainer.classList.remove('hidden');\n        //         }\n        //     }\n        const target = e.currentTarget;\n        if(target){\n            const value = target.value;\n            // Ghosting\n            // const matchBeginningRegex = new RegExp(`^${value}`, 'g')\n            // if (e.code !== 'ENTER') {\n            //     if (matchesContainer && matchesContainer.firstElementChild && matchesContainer.firstElementChild.dataset.key) {\n            //         if (matchesContainer.firstElementChild.dataset.key.match(matchBeginningRegex)) {\n            //             searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n            //         } else {\n            //             searchInputGhost.value = '';\n            //         }\n            //     } else {\n            //         if(searchInputGhost) searchInputGhost.value = '';\n            //     }\n            // }\n            // if (value === '' || (matchesContainer && matchesContainer.children.length === 0)) {\n            //     matchesContainer.classList.add('hidden');\n            //     count = 0;\n            //     if(searchInputGhost) searchInputGhost.value = '';\n            // }\n            // // reset when text is inserted.\n            // if (e.keyCode !== 39 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 13) {\n            //     count = 0;\n            // }\n            // // left arrow\n            // if (e.keyCode === 39) {\n            //     if(searchInputGhost && matchesContainer){\n            //         searchInputGhost.value = matchesContainer.firstElementChild.dataset.key;\n            //         e.currentTarget.value = matchesContainer.firstElementChild.dataset.key;\n            //     }\n            // }\n            // // up arrow\n            // if (e.keyCode === 38) {\n            //     if (count >= 0) {\n            //         count = (count === 0) ? count = 0 : count - 1;\n            //         if (matchesContainer && matchesContainer.children[count]) {\n            //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n            //             searchResultsContainer.children[count].classList.add('text-gray-900');\n            //         }\n            //     }\n            // }\n            // // down arrow\n            // if (e.keyCode === 40) {\n            //     const listMaxLength = matchesContainer && matchesContainer.children.length - 1\n            //     if (count <= listMaxLength) {\n            //         if (!isInitialValue) {\n            //             count = (count === listMaxLength) ? listMaxLength : count + 1\n            //         }\n            //         if (matchesContainer && matchesContainer.children[count]) {\n            //             searchResultsContainer.children[count].classList.add('bg-lexicblue-300');\n            //             searchResultsContainer.children[count].classList.add('text-gray-900');\n            //             isInitialValue = false;\n            //         }\n            //     }\n            // }\n            // //esc\n            // if (e.keyCode === 27) {\n            //     matchesContainer && matchesContainer.classList.add('hidden');\n            // }\n        }\n        return [];\n    }\n\n\n\n\n\n\n    console.log(query)\n\n    return <ul data-matches-container className=\"hidden\">\n        <li id=\"${index}\"\n            className=\"text-sm break-words text-gray-200 cursor-pointer hover:text-gray-900 hover:bg-lexicblue-300 p-1\"\n            data-key=\"${term}\">\n            <span className=\"bg-lexicblue-100 text-gray-900\">${query}</span>\n        </li>\n    </ul>;\n}\n"],"mappings":";AACA,OAAOA,UAAU,MAAM,oBAAoB;AAAC;AAM5C,eAAe,SAASC,gBAAgB,OAAe;EAAA,IAAd;IAACC;EAAW,CAAC;EAElD,MAAMC,WAAW,GAAID,KAAY,IAAK;IAClC,MAAME,KAAK,GAAG,IAAIC,MAAM,CAACH,KAAK,EAAE,IAAI,CAAC;IACrC,MAAMI,UAAmB,GAAG,EAAE;IAC9B,CAACN,UAAU,CAAC,CAACO,OAAO,CAACC,GAAG,IAAI;MACxB,KAAK,IAAI,CAACC,IAAI,EAAEC,GAAG,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;QACzCF,UAAU,CAACO,IAAI,CAACJ,IAAI,CAAC;MACzB;IACJ,CAAC,CAAC;IACF,OAAOH,UAAU,CAACQ,MAAM,CAAEC,GAAU,IAAKA,GAAG,CAACC,KAAK,CAACZ,KAAK,CAAC,CAAC;EAC9D,CAAC;EAED,MAAMa,iBAAiB,GAAIC,CAAuC,IAAK;IACnE,MAAMC,EAAE,GAAGD,CAAC,CAACE,aAAa;IAC1B,IAAGD,EAAE,EAAC;MACF,MAAME,KAAK,GAAGF,EAAE,CAACE,KAAK;MACtB,MAAMC,UAAU,GAAGnB,WAAW,CAACkB,KAAK,CAAC;MACrC,OAAOC,UAAU,CAACC,GAAG,CAAC,CAACd,IAAI,EAAEe,KAAK,KAAK;QACnC,MAAMpB,KAAK,GAAG,IAAIC,MAAM,CAACgB,KAAK,EAAE,IAAI,CAAC;QACrC,OAAOZ,IAAI,CAACgB,OAAO,CAACrB,KAAK,EAAEiB,KAAK,CAAC;MACrC,CAAC,CAAC;IACN;EACJ,CAAC;EAED,MAAMK,oBAAoB,GAAIR,CAAuC,IAAO;IACxE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMS,MAAM,GAAGT,CAAC,CAACE,aAAa;IAC9B,IAAGO,MAAM,EAAC;MACN,MAAMN,KAAK,GAAGM,MAAM,CAACN,KAAK;MAC1B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;;IACA,OAAO,EAAE;EACb,CAAC;EAODO,OAAO,CAACC,GAAG,CAAC3B,KAAK,CAAC;EAElB,oBAAO;IAAI,8BAAsB;IAAC,SAAS,EAAC,QAAQ;IAAA,uBAChD;MAAI,EAAE,EAAC,UAAU;MACb,SAAS,EAAC,iGAAiG;MAC3G,YAAS,SAAS;MAAA,uBAClB;QAAM,SAAS,EAAC,gCAAgC;QAAA,gBAAGA,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA;IAAQ;MAAA;MAAA;MAAA;IAAA;EAC/D;IAAA;IAAA;IAAA;EAAA,QACJ;AACT;AAAC,KAjHuBD,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}