{"ast":null,"code":"var _jsxFileName = \"/Users/charles.hanna/Development/useful-chrome-extensions/abbreviations-dictionary/src/Components/MatchesContainer.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport dictionary from \"../dictionary.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MatchesContainer(_ref) {\n  _s();\n  let {\n    query,\n    count,\n    setCount,\n    setDef,\n    setQuery\n  } = _ref;\n  const findMatches = query => {\n    const regex = new RegExp(query, 'gi');\n    const termsArray = [];\n    [dictionary].forEach(obj => {\n      Object.keys(obj).forEach(term => termsArray.push(term));\n    });\n    return termsArray.filter(val => val.match(regex));\n  };\n  console.log(dictionary[\"e-series\"]);\n  console.log(query);\n  let matchesArray = [];\n  useEffect(() => {\n    count >= matchesArray.length - 1 && setCount(matchesArray.length - 1);\n    count <= 0 && setCount(0);\n\n    // @ts-ignore\n    setDef(dictionary[matchesArray[count]]);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: query && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"border-slate-600 border-2 rounded\",\n      children: findMatches(query).map((term, index, arr) => {\n        const regex = new RegExp(query, 'gi');\n        const itemValue = term.replace(regex, query);\n        matchesArray = arr;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `${count === index ? 'bg-slate-400 text-slate-900' : ''} text-sm break-words text-slate-500 cursor-pointer hover:text-slate-200 hover:bg-slate-600 p-1`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: itemValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(MatchesContainer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MatchesContainer;\nvar _c;\n$RefreshReg$(_c, \"MatchesContainer\");","map":{"version":3,"names":["useEffect","dictionary","MatchesContainer","query","count","setCount","setDef","setQuery","findMatches","regex","RegExp","termsArray","forEach","obj","Object","keys","term","push","filter","val","match","console","log","matchesArray","length","map","index","arr","itemValue","replace"],"sources":["/Users/charles.hanna/Development/useful-chrome-extensions/abbreviations-dictionary/src/Components/MatchesContainer.tsx"],"sourcesContent":["import {useEffect} from \"react\";\nimport dictionary from \"../dictionary.json\";\n\ninterface Props{\n    query: string;\n    count: number;\n    setCount: (count: number) => void\n    setQuery:(value:string) => void\n    setDef: (query: string) => void\n}\n\nexport default function MatchesContainer({query, count, setCount, setDef, setQuery}:Props){\n    const findMatches = (query:string) => {\n        const regex = new RegExp(query, 'gi');\n        const termsArray:string[] = [];\n        [dictionary].forEach(obj => {\n            Object.keys(obj).forEach((term) => termsArray.push(term));\n        })\n        return termsArray.filter((val:string) => val.match(regex))\n    }\n\n    console.log(dictionary[\"e-series\"])\n    console.log(query);\n\n    let matchesArray:string[] = [];\n\n    useEffect(() => {\n        count >= matchesArray.length -1 && setCount(matchesArray.length -1)\n        count <= 0 && setCount(0);\n        \n        // @ts-ignore\n        setDef(dictionary[matchesArray[count]])\n\n    })\n\n    return (\n        <>\n            {query && (\n                <ul className=\"border-slate-600 border-2 rounded\" >\n                {findMatches(query).map((term, index, arr) => {\n                    const regex = new RegExp(query, 'gi');\n                    const itemValue =  term.replace(regex, query);\n                    matchesArray = arr;\n                    return (\n                        <li key={index}\n                            className={`${count === index ? 'bg-slate-400 text-slate-900':''} text-sm break-words text-slate-500 cursor-pointer hover:text-slate-200 hover:bg-slate-600 p-1`}>\n                            <span>{itemValue}</span>\n                        </li>\n                    )\n                })}\n                </ul>)}\n        </>)\n\n}\n"],"mappings":";;AAAA,SAAQA,SAAS,QAAO,OAAO;AAC/B,OAAOC,UAAU,MAAM,oBAAoB;AAAC;AAAA;AAU5C,eAAe,SAASC,gBAAgB,OAAkD;EAAA;EAAA,IAAjD;IAACC,KAAK;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAc,CAAC;EACrF,MAAMC,WAAW,GAAIL,KAAY,IAAK;IAClC,MAAMM,KAAK,GAAG,IAAIC,MAAM,CAACP,KAAK,EAAE,IAAI,CAAC;IACrC,MAAMQ,UAAmB,GAAG,EAAE;IAC9B,CAACV,UAAU,CAAC,CAACW,OAAO,CAACC,GAAG,IAAI;MACxBC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACD,OAAO,CAAEI,IAAI,IAAKL,UAAU,CAACM,IAAI,CAACD,IAAI,CAAC,CAAC;IAC7D,CAAC,CAAC;IACF,OAAOL,UAAU,CAACO,MAAM,CAAEC,GAAU,IAAKA,GAAG,CAACC,KAAK,CAACX,KAAK,CAAC,CAAC;EAC9D,CAAC;EAEDY,OAAO,CAACC,GAAG,CAACrB,UAAU,CAAC,UAAU,CAAC,CAAC;EACnCoB,OAAO,CAACC,GAAG,CAACnB,KAAK,CAAC;EAElB,IAAIoB,YAAqB,GAAG,EAAE;EAE9BvB,SAAS,CAAC,MAAM;IACZI,KAAK,IAAImB,YAAY,CAACC,MAAM,GAAE,CAAC,IAAInB,QAAQ,CAACkB,YAAY,CAACC,MAAM,GAAE,CAAC,CAAC;IACnEpB,KAAK,IAAI,CAAC,IAAIC,QAAQ,CAAC,CAAC,CAAC;;IAEzB;IACAC,MAAM,CAACL,UAAU,CAACsB,YAAY,CAACnB,KAAK,CAAC,CAAC,CAAC;EAE3C,CAAC,CAAC;EAEF,oBACI;IAAA,UACKD,KAAK,iBACF;MAAI,SAAS,EAAC,mCAAmC;MAAA,UAChDK,WAAW,CAACL,KAAK,CAAC,CAACsB,GAAG,CAAC,CAACT,IAAI,EAAEU,KAAK,EAAEC,GAAG,KAAK;QAC1C,MAAMlB,KAAK,GAAG,IAAIC,MAAM,CAACP,KAAK,EAAE,IAAI,CAAC;QACrC,MAAMyB,SAAS,GAAIZ,IAAI,CAACa,OAAO,CAACpB,KAAK,EAAEN,KAAK,CAAC;QAC7CoB,YAAY,GAAGI,GAAG;QAClB,oBACI;UACI,SAAS,EAAG,GAAEvB,KAAK,KAAKsB,KAAK,GAAG,6BAA6B,GAAC,EAAG,gGAAgG;UAAA,uBACjK;YAAA,UAAOE;UAAS;YAAA;YAAA;YAAA;UAAA;QAAQ,GAFnBF,KAAK;UAAA;UAAA;UAAA;QAAA,QAGT;MAEb,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA;EACI,iBACX;AAEX;AAAC,GA1CuBxB,gBAAgB;AAAA,KAAhBA,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}